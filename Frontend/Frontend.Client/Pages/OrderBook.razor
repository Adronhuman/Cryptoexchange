@page "/"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender:false));

@using Core.Shared.Domain.Models
@using Frontend.Client.Services
@using Frontend.Client.Components;

@inject OrderBookService OrderBookService
@inject IJSRuntime JSRuntime

<PageTitle>Order Book</PageTitle>

<div class="parent-container">
    <div class="chart-and-controls">
        <h1>Order Book</h1>
        <label for="size-dropdown">Size</label>
        <select id="size-dropdown" value="@SelectedSize" @onchange="OnSizeChanged" class="form-select">
            @foreach (var size in availableSizes)
            {
                <option value="@size">@size</option>
            }
        </select>

        @if (Bids.Count == 0 && Asks.Count == 0)
        {
            <p><em>Loading...</em></p>
        }

        <div id="chartContainer"></div>
    </div>

    <BuyBTC OrderBookService="OrderBookService"/>
</div>

@code {
    private List<int> availableSizes = [50, 100];
    private int SelectedSize { get; set; } = 50;

    private List<Order> Bids = [];
    private List<Order> Asks = [];


    protected override async Task OnInitializedAsync()
    {
        OrderBookService.NewOrderBook += async (s, orderBook) => {
            Bids = orderBook.Bids.ToList();
            Asks = orderBook.Asks.ToList();
            await JSRuntime.InvokeVoidAsync("updateChart", Bids, Asks);
            await InvokeAsync(StateHasChanged);
        };

        await Refresh();
        ConfigurePeriodicRefresh();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender){
        if (firstRender)
            await JSRuntime.InvokeVoidAsync("initializeChart", Bids, Asks);
    }

    private async Task Refresh(){
        await OrderBookService.SetupOrderBookAsync(SelectedSize);
    }

    private async void OnSizeChanged(ChangeEventArgs e)
    {
        SelectedSize = int.Parse(e.Value.ToString());
        await Refresh();
    }

    private void ConfigurePeriodicRefresh()
    {
        Task.Run(async () =>
        {
            while (true)
            {   
                await Refresh();
                await Task.Delay(30_000);
            }
        });
    }
}

<style>
    .parent-container {
        display: flex;
        gap: 20px;
        align-items: flex-start;
    }

    .chart-and-controls {
        flex: 1;
        display: flex;
        flex-direction: column; 
        gap: 10px;
    }

    .chart-and-controls .form-select {
        max-width: 200px;
        padding: 8px;
        font-size: 1rem;
    }

    #chartContainer {
        flex: 1;
        background-color: #333;
        border-radius: 5px;
        min-height: 300px;
    }

    BuyBTC {
        width: 300px;
    }
</style>