@page "/"
@using Core.Shared.Domain.Models
@using Frontend.Client.Services
@rendermode InteractiveWebAssembly

@inject OrderBookService OrderBookService

<PageTitle>Order Book</PageTitle>

<h1>Order book</h1>

@if (Bids.Count == 0 && Asks.Count == 0)
{
    <p><em>Loading...</em></p>
}
else
{   
    <label>Size</label>
    <select value="@SelectedSize" @onchange="OnSizeChanged" class="form-select">
        @foreach (var size in availableSizes)
        {
            <option value="@size">@size</option>
        }
    </select>

    <div class="order-book">
        <div class="order-book-column">
            <h4>Bids</h4>
            <table class="table">
                <thead>
                    <tr>
                        <th>Price</th>
                        <th>Amount</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var bid in Bids)
                    {
                        <tr>
                            <td>@bid.Price</td>
                            <td>@bid.Amount</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="order-book-column">
            <h4>Asks</h4>
            <table class="table">
                <thead>
                    <tr>
                        <th>Price</th>
                        <th>Amount</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var ask in Asks)
                    {
                        <tr>
                            <td>@ask.Price</td>
                            <td>@ask.Amount</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    private List<int> availableSizes = [5, 10, 20];
    private int SelectedSize { get; set; } = 5;

    private List<Order> Bids = [];
    private List<Order> Asks = [];


    protected override async Task OnInitializedAsync()
    {
        OrderBookService.NewOrderBook += (s, orderBook) => {
            Bids = orderBook.Bids.ToList();
            Asks = orderBook.Asks.ToList();
            InvokeAsync(StateHasChanged);
        };

        await Refresh();
        ConfigurePeriodicRefresh();
    }

    private async Task Refresh(){
        await OrderBookService.SetupOrderBookAsync(SelectedSize);
    }

    private async void OnSizeChanged(ChangeEventArgs e)
    {
        SelectedSize = int.Parse(e.Value.ToString());
        await Refresh();
    }

    private void ConfigurePeriodicRefresh()
    {
        Task.Run(async () =>
        {
            while (true)
            {   
                await Refresh();
                await Task.Delay(30_000);
            }
        });
    }
}
